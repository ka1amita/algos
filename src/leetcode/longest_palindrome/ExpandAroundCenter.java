package src.leetcode.longest_palindrome;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static src.leetcode.longest_palindrome.ExpandAroundCenter.getLongestPalindrome;

import org.junit.jupiter.api.Test;

public class ExpandAroundCenter {

  private static int start = 0;
  private static int longest = 0;

  static String getLongestPalindrome(String s) {
    char[] letters = s.toCharArray();

    for (int center = 0; center < letters.length; center++) {
      expand(letters, center, center);
      expand(letters, center, center + 1);
    }
    return s.substring(start, start + longest);
  }

  private static void expand(char[] letters, int left, int right) {
    while (left >= 0 && right < letters.length && letters[left] == letters[right]) {
      left--;
      right++;
    }
    left++; // roll back the last (non-palindromic) iteration
    right--; // roll back the last (non-palindromic) iteration
    if (longest < right - left + 1) {
      longest = right - left + 1;
      start = left;
    }
  }

  public String getLongestPalindromeWithString(String s) {
    String longest = "";
    for (int i = 0; i < s.length(); i++) {
      // length check
      String odd = expand(s, i, i);
      String even = expand(s, i, i + 1);
      if (odd.length() > longest.length()) {
        longest = odd;
      }
      if (even.length() > longest.length()) {
        longest = even;
      }
    }
    return longest;
  }

  private String expand(String s, int left, int right) {
    String sub = "";
    while (left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) {
      sub = s.substring(left--,
          1 + right++); // making useless intermediate substring slows down the iteration!
    }
    return sub;
  }
}

class TestExpandAroundCenter {

  @Test
  void test_() {
    assertEquals("bb", getLongestPalindrome("abbc"));
    assertEquals("abba", getLongestPalindrome("abba"));
    assertEquals("a", getLongestPalindrome("abcd"));
    assertEquals("bab", getLongestPalindrome("babad"));
    assertEquals("", getLongestPalindrome(""));
    assertEquals("ccc", getLongestPalindrome("ccc"));
    assertEquals(

        getLongestPalindrome(

  }
}
