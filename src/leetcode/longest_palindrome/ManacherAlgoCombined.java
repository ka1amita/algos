package src.leetcode.longest_palindrome;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static src.leetcode.longest_palindrome.ManacherAlgoCombined.getLongestPalindrome;

import org.junit.jupiter.api.Test;

public class ManacherAlgoCombined {

  public static String getLongestPalindrome(String s) {
    if (s.length() <= 1) {
      return s;
    }
    char[] string = s.toCharArray();
    int length = string.length;

    int longestLeft = 0;
    int longestRight = 0;

    int[][] radius = new int[2][length];

    for (int oddity = 0; oddity < 2; oddity++) {
      int rightmostLeft = 0;
      int rightmostRight = 0;
      for (int mid = 0; mid < length; mid++) {
        if (mid < rightmostRight) {
          radius[oddity][mid] =
              Math.min(radius[oddity][rightmostLeft + rightmostRight - mid + 1 - oddity],
                       rightmostRight - mid);
        }
        int left = mid - radius[oddity][mid] - oddity;
        int right = mid + radius[oddity][mid] + 1;
        while (left >= 0 && right < length && string[left] == string[right]) {
          radius[oddity][mid]++;
          left--;
          right++;
        }
        if (mid + radius[oddity][mid] > rightmostRight) {
          rightmostLeft = mid - radius[oddity][mid] + 1 - oddity;
          rightmostRight = mid + radius[oddity][mid];
        }
        if (2 * radius[oddity][mid] > longestRight - longestLeft + 1 - oddity) {
          longestLeft = mid - radius[oddity][mid] + 1 - oddity;
          longestRight = mid + radius[oddity][mid];
        }
      }
    }
    return s.substring(longestLeft, longestRight + 1);
  }
}
class TestManacherAlgoCombined {

  @Test
  void testManacherAlgo() {
    assertEquals("", getLongestPalindrome(""));
    assertEquals("a", getLongestPalindrome("a"));
    assertEquals("aa", getLongestPalindrome("aa"));
    assertEquals("ccc", getLongestPalindrome("ccc"));
    assertEquals("bb", getLongestPalindrome("abbc"));
    assertEquals("abba", getLongestPalindrome("abba"));
    assertEquals("a", getLongestPalindrome("abcd"));
    assertEquals("bab", getLongestPalindrome("babad"));
    assertEquals("321012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210123",
                 getLongestPalindrome("321012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210012321001232100123210123210012321001232100123210123"));
  }
}
